# -*- Mode: Shell-script -*-
# Bruce C. Miller
# Time-stamp: <2017-04-14 20:24:19 (bm3719)>
# FreeBSD and GNU/Linux version
# NOTE: To use as root, which is probably not a good idea to begin with:
#       - Remove . from PATH.
#       - Change compinstall filename path.
#       - Change WWW_HOME and ANT_HOME.
# TIPS: The <() construct lets you avoid having to use temporary files as
#       arguments to commands, e.g. `diff -y <(wc -l 1/*) <(wc -l 2/*)'

# Huge history file; great for C-r searching long ago used commands.
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000

setopt appendhistory    # Save history from all zsh sessions.
setopt beep             # Gets overridden by screen's visual bell.
setopt extendedglob     # zsh pattern matching.
setopt nomatch
setopt nocheckjobs      # Don't complain about background jobs on exit.
setopt nohup            # Don't kill background jobs on exit.
setopt hist_expire_dups_first
# printexitvalue        # Print exit value from jobs. Useful for shell scripts.
# pushd: Creates directory stacks that you can popd back to with cd -n, where n
# is an integer.
setopt auto_pushd

# Set a universal term type.
#export TERM=xterm-256color
export TERM=screen-256color

# Detect OS type.  Currently only using for the difference in `ls' flags.
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
elif [[ "$unamestr" == 'FreeBSD' ]]; then
    platform='freebsd'
fi

bindkey -e              # Emacs keybindings.

# zstyle modifications.
zstyle :compinstall filename '/home/bm3719/.zshrc'
# Hostname completions based on the contents of ~/.ssh/known_hosts file.
# Requires ~/.ssh/config change of: HashKnownHosts no
# Disabling this by default on multi-user machines, since anyone that gains
# read access can help themselves to a non-hashed list, and known_hosts is by
# default chmod 0644.
#hosts=(${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:#[0-9]*}%%\*}%%,*})
#zstyle ':completion:*:hosts' hosts $hosts

autoload -Uz compinit
compinit

# A righteous umask.
umask 027               # u=rw,g=r,o=

# $PATH
PATH=$HOME/bin:/sbin:/usr/sbin:/bin:/usr/bin:$PATH
PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/libexec:$HOME/.local/bin
PATH=$PATH:$HOME/node_modules/.bin
PATH=$PATH:$HOME/.racket/6.7/bin
PATH=$PATH:.
# Append /usr/games to $PATH if it exists.
if [ -d /usr/games ]
then
    PATH=$PATH:/usr/games
fi

# Autoload zsh modules when they are referenced.
zmodload -a zsh/stat stat
zmodload -a zsh/zpty zpty
zmodload -a zsh/zprof zprof
zmodload -ap zsh/mapfile mapfile

# Useful in Emacs shell/TRAMP.
[ $TERM = "dumb" ] && unsetopt zle

# Prompt
autoload colors zsh/terminfo
if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
fi
# for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
#   eval PR_$color='%{$terminfo[bold]$fg[${(L)color}]%}'
#   eval PR_LIGHT_$color='%{$fg[${(L)color}]%}'
#   (( count = $count + 1 ))
# done
# PR_NO_COLOR="%{$terminfo[sgr0]%}"
# PS1=`echo "[$PR_BLUE%n@%m:%c$PR_NO_COLOR]%# " | tr -d "$<2>"`

export SBCL_HOME=/usr/local/lib/sbcl
export FTPANONPASS=nobody@nodomain.nox
# Explicitly set TZ, which saves many system calls.
export TZ=:/etc/localtime
# `less' gets aliased later, so unaliasing here if it's aliased prevents errors
# when sourcing this file.
if [ -n "`alias -m \"*less*\"`" ]
then
    unalias less >& /dev/null
fi
# Set PAGER to `less' only if it exists.
if [ -x $(which less) ]
then
    export PAGER=less
else
    alias less=more
fi
export EDITOR='emacsclient -n'
export SVN_EDITOR='emacsclient'
export GIT_EDITOR='emacsclient'
export GREP_COLOR='01;32'              # Set grep color to green (default red).
# Set Lynx start page to bookmarks file.
export WWW_HOME="file:///home/bm3719/lynx_bookmarks.html"
# Regionalization used by w3m.
export LC_ALL=en_US.UTF-8
# General locale.
export LANG=en_US.UTF-8
export CHARSET=UTF-8
# Java ecology stuff
export JAVA_HOME=/usr/local/openjdk8
export CLASSPATH=$CLASSPATH:.:/usr/local/share/java/classes/jline.jar
export ANT_HOME=/usr/local/share/java/apache-ant
# Python-related stuff.
if [ -d /usr/local/share/doc/python2.7 ]
then
    export PYTHONDOCS=/usr/local/share/doc/python2.7
elif [ -d /usr/share/doc/python2.6 ]
then
    export PYTHONDOCS=/usr/share/doc/python2.6
else
    export PYTHONDOCS=/usr/share/doc/python/html
fi
# Disable newer JVM options for Leiningen 2.2.x.  Remove this later after
# upgrading to JVM 1.7.x.
export LEIN_JVM_OPTS=

# Colorized manpages.
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# Disable flow control handling (can mess up screen sessions if C-s or C-a s is
# hit).
stty -ixon -ixoff
# Stop background job output to stdout until foregrounded.  A message will be
# printed before the next prompt display.  Usually don't want this.
#stty tostop

# Aliases
alias -g ...="../.."
alias -g ....="../../.."
alias -g .....="../../../.."
alias -g NUL="> /dev/null 2>&1"
alias f="finger"
if [[ $platform == 'linux' ]]
then
    alias ls='ls --color=auto'
elif [[ $platform == 'freebsd' ]]
then
    alias ls='ls -G'
fi
alias ll="ls -al"
alias diff="colordiff"
alias grep="grep --colour=auto"
#alias s="screen -U"
#alias sd="screen -d"
#alias sr="screen -rx"
alias tn="tmux new -s main -d && \
          tmux new-window -t main && \
          tmux send-keys -t main "em" Enter && \
          tmux a -t main"
alias td="tmux detach -s main"
alias ta="tmux a -t main"
alias tl="tmux ls"
alias untar="tar xzfv"
alias unbz2="tar xvfj"
alias sui="sudo -i"
alias lup="sudo /usr/libexec/locate.updatedb"
alias rz="lrz -e"
alias sz="lsz -e"
alias ec="emacsclient -n"    # Use this with server-start.
alias gc="gnuclient-emacs"   # Use this with gnuserv-emacs.
alias em="emacs -nw"
alias xpdf="xpdf -z page"
if [ -x $(which less) ]
then
    alias less="less -RXF"
fi
alias bc="bc -ql"
alias ttt="telnet yay.tim.org 5440"
# Aliases for X11 forwarding.
alias rurxvt="urxvt -sl 10000 -ls -geometry 120x48"
# Disk Hogs Summary - disk usage by directory beneath this, sorted by
# size. (Directories that contain less than 100k are silently removed.)
alias dfs="du -kd 1000 \"\$@\" | awk '(\$1 >= 100)' | sort -rn"

# Functions
# A find function, saving some typing for the most common find call.
ff() {
    find . -name \*$1\* -print;
}
# Colorize `svn diff' output.  Requires colordiff to be installed.
svndiff() {
    svn diff "${@}" | colordiff
}

# oh-my-zsh: I've removed from this project just what I think is useful.
# There's a lot of stuff in oh-my-zsh that I don't agree with, and it's
# inconvenient to maintain a separate fork of a repo for my shell.  This keeps
# it all on one file.

# oh-my-zsh plugins: Just using git and svn.  Consider lein and github later.
# git.plugin.zsh
alias g='git'
compdef g=git
alias gst='git status'
compdef _git gst=git-status
alias gu='git pull --rebase'
compdef _git gl=git-pull
alias gup='git fetch && git rebase'
compdef _git gup=git-fetch
alias gp='git push -u origin master'
compdef _git gp=git-push
gdv() { git diff -w "$@" | view - }
compdef _git gdv=git-diff
alias gc='git commit -v'
compdef _git gc=git-commit
alias gca='git commit -v -a'
compdef _git gca=git-commit
alias gco='git checkout'
compdef _git gco=git-checkout
alias gcm='git checkout master'
alias gb='git branch'
compdef _git gb=git-branch
alias gba='git branch -a'
compdef _git gba=git-branch
alias gcount='git shortlog -sn'
compdef gcount=git
alias gcp='git cherry-pick'
compdef _git gcp=git-cherry-pick
alias glg='git log --stat --max-count=5'
compdef _git glg=git-log
alias glgg='git log --graph --max-count=5'
compdef _git glgg=git-log
alias gss='git status -s'
compdef _git gss=git-status
alias ga='git add'
compdef _git ga=git-add
alias gm='git merge'
compdef _git gm=git-merge
alias grh='git reset HEAD'
alias grhh='git reset HEAD --hard'
# Git and svn mix.
alias git-svn-dcommit-push='git svn dcommit && git push github master:svntrunk'
compdef git-svn-dcommit-push=git
alias gsr='git svn rebase'
alias gsd='git svn dcommit'
# Returns the current branch name.
# Usage example: git pull origin $(current_branch)
function current_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo ${ref#refs/heads/}
}
# These aliases take advantage of the previous function.
alias ggpull='git pull origin $(current_branch)'
compdef ggpull=git
alias ggpush='git push origin $(current_branch)'
compdef ggpush=git
alias ggpnp='git pull origin $(current_branch) && git push origin $(current_branch)'
compdef ggpnp=git

# svn.plugin.zsh
function svn_prompt_info {
    if [ $(in_svn) ]; then
        echo "$ZSH_PROMPT_BASE_COLOR$ZSH_THEME_SVN_PROMPT_PREFIX\
$ZSH_THEME_REPO_NAME_COLOR$(svn_get_repo_name)$ZSH_PROMPT_BASE_COLOR$ZSH_THEME_SVN_PROMPT_SUFFIX$ZSH_PROMPT_BASE_COLOR$(svn_dirty)$ZSH_PROMPT_BASE_COLOR"
    fi
}
function in_svn() {
    if [[ -d .svn ]]; then
        echo 1
    fi
}
function in_exclude() {
    # TODO: Exclude /usr/ports.
}
function svn_get_repo_name {
    if [ $(in_svn) ]; then
        svn info | sed -n 's/Repository\ Root:\ .*\///p' | read SVN_ROOT
        svn info | sed -n "s/URL:\ .*$SVN_ROOT\///p" | sed "s/\/.*$//"
    fi
}
function svn_get_rev_nr {
    if [ $(in_svn) ]; then
        svn info 2> /dev/null | sed -n s/Revision:\ //p
    fi
}
function svn_dirty_choose {
    if [ $(in_svn) ]; then
        s=$(svn status|grep -E '^\s*[ACDIM!?L]' 2>/dev/null)
        if [ $s ]; then
            echo $1
        else
            echo $2
        fi
    fi
}
function svn_dirty {
    svn_dirty_choose $ZSH_THEME_SVN_PROMPT_DIRTY $ZSH_THEME_SVN_PROMPT_CLEAN
}

# oh-my-zsh/lib/theme-and-appearance.zsh: Only relevant stuff used here.
# Apply theming defaults.
PS1="%n@%m:%~%# "
# Setup the prompt with pretty colors.
setopt prompt_subst

# oh-my-zsh/lib/git.zsh
# Get the name of the branch we are on.
function git_prompt_info() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo "$ZSH_THEME_GIT_PROMPT_PREFIX${ref#refs/heads/}$(parse_git_dirty)$ZSH_THEME_GIT_PROMPT_SUFFIX"
}
# Checks if working tree is dirty.
parse_git_dirty() {
    local SUBMODULE_SYNTAX=''
    if [[ $POST_1_7_2_GIT -gt 0 ]]; then
        SUBMODULE_SYNTAX="--ignore-submodules=dirty"
    fi
    if [[ -n $(git status -s ${SUBMODULE_SYNTAX}  2> /dev/null) ]]; then
        echo "$ZSH_THEME_GIT_PROMPT_DIRTY"
    else
        echo "$ZSH_THEME_GIT_PROMPT_CLEAN"
    fi
}
# Checks if there are commits ahead from remote.
function git_prompt_ahead() {
    if $(echo "$(git log origin/$(current_branch)..HEAD 2> /dev/null)" | grep '^commit' &> /dev/null); then
        echo "$ZSH_THEME_GIT_PROMPT_AHEAD"
    fi
}
# Formats prompt string for current git commit short SHA.
function git_prompt_short_sha() {
    SHA=$(git rev-parse --short HEAD 2> /dev/null) && echo "$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER"
}

# Formats prompt string for current git commit long SHA.
function git_prompt_long_sha() {
    SHA=$(git rev-parse HEAD 2> /dev/null) && echo "$ZSH_THEME_GIT_PROMPT_SHA_BEFORE$SHA$ZSH_THEME_GIT_PROMPT_SHA_AFTER"
}
# Get the status of the working tree.
git_prompt_status() {
    INDEX=$(git status --porcelain 2> /dev/null)
    STATUS=""
    if $(echo "$INDEX" | grep '^?? ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_UNTRACKED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^A  ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
    elif $(echo "$INDEX" | grep '^M  ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_ADDED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^ M ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
    elif $(echo "$INDEX" | grep '^AM ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
    elif $(echo "$INDEX" | grep '^ T ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_MODIFIED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^R  ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_RENAMED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^ D ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
    elif $(echo "$INDEX" | grep '^AD ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_DELETED$STATUS"
    fi
    if $(echo "$INDEX" | grep '^UU ' &> /dev/null); then
        STATUS="$ZSH_THEME_GIT_PROMPT_UNMERGED$STATUS"
    fi
    echo $STATUS
}
# Compare the provided version of git to the version installed and on path.
# Prints 1 if input version <= installed version
# Prints -1 otherwise
function git_compare_version() {
    local INPUT_GIT_VERSION=$1;
    local INSTALLED_GIT_VERSION
    INPUT_GIT_VERSION=(${(s/./)INPUT_GIT_VERSION});
    INSTALLED_GIT_VERSION=($(git --version));
    INSTALLED_GIT_VERSION=(${(s/./)INSTALLED_GIT_VERSION[3]});
    for i in {1..3}; do
        if [[ $INSTALLED_GIT_VERSION[$i] -lt $INPUT_GIT_VERSION[$i] ]]; then
            echo -1
            return 0
        fi
    done
    echo 1
}
# This is unlikely to change so make it all staticly assigned.
POST_1_7_2_GIT=$(git_compare_version "1.7.2")
# Clean up the namespace slightly by removing the checker function.
unset -f git_compare_version

# oh-my-zsh theme: A modified dpoggi.zsh-theme.
if [ $UID -eq 0 ]; then NCOLOR="red"; else NCOLOR="blue"; fi
local return_code="%(?..%{$fg[red]%}%? ↵%{$reset_color%})"
PROMPT='%{$fg[$NCOLOR]%}%n%{$reset_color%}@%{$fg[blue]%}%m\
%{$reset_color%}:%{$fg[magenta]%}%~\
$(git_prompt_info)\
$(svn_prompt_info)\
%{$fg[blue]%}%(!.#.»)%{$reset_color%} '
PROMPT2='%{$fg[red]%}\ %{$reset_color%}'
RPS1='${return_code}'
ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[yellow]%}("
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[green]%}○%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[red]%}⚡%{$reset_color%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$fg[yellow]%})%{$reset_color%}"
ZSH_THEME_SVN_PROMPT_PREFIX="%{$fg[yellow]%}("
ZSH_THEME_SVN_PROMPT_SUFFIX="%{$fg[yellow]%})%{$reset_color%}"
ZSH_THEME_SVN_PROMPT_DIRTY="%{$fg[red]%}⚡%{$reset_color%}"
ZSH_THEME_SVN_PROMPT_CLEAN="%{$fg[green]%}○%{$reset_color%}"
